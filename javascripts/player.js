// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var Player, bufferBuilder, buffersPause, buffersPlay, buffersReset, buffersStop, rmFromArray, test_parts;
    window.musocrat = window.musocrat || {};
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    musocrat.context = new AudioContext();
    musocrat.sync = musocrat.sync || 0;
    musocrat.baseTTS = musocrat.baseTTS || {};
    musocrat.buffers = {};
    musocrat.buffers.players = {};
    musocrat.buffers.active = [];
    musocrat.buffers.playing = [];
    musocrat.buffers.cache = [];
    rmFromArray = function(array, value) {
      var in_array;
      in_array = $.inArray(value, array);
      if (in_array !== -1) {
        return array.splice(in_array, 1);
      }
    };
    Player = (function() {
      function Player(id, url, tts, offset) {
        this.clean = __bind(this.clean, this);
        this.reset = __bind(this.reset, this);
        this.pause = __bind(this.pause, this);
        this.stop = __bind(this.stop, this);
        this.play = __bind(this.play, this);
        this.time = __bind(this.time, this);
        this.baseTTS = __bind(this.baseTTS, this);
        this.getCachedBuffer = __bind(this.getCachedBuffer, this);
        this.cloneBuffer = __bind(this.cloneBuffer, this);
        this.loaded = __bind(this.loaded, this);
        this.buffer = __bind(this.buffer, this);
        this.id = id;
        this.url = url;
        this.tts = tts || 0;
        this.offset = offset || 0;
        this.cached = $.inArray(this.id, musocrat.buffers.active) >= 0 ? true : false;
        this.clone = this.cached ? this.getCachedBuffer() : null;
        this.audio = musocrat.context.createBufferSource();
        this.ready = false;
        this.error = false;
        this.playing = false;
        this.started = 0;
        this.position = function() {
          return (musocrat.context.currentTime - this.started) + this.offset;
        };
        this.buffer();
        this.baseTTS();
      }

      Player.prototype.buffer = function() {
        var buffer, bufferSetup, decodeError, i, request, _i, _ref;
        if (this.clone !== null) {
          buffer = this.clone.buffer;
          buffer = musocrat.context.createBuffer(buffer.numberOfChannels, buffer.length, buffer.sampleRate);
          for (i = _i = 0, _ref = buffer.numberOfChannels; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            buffer.getChannelData(i).set(this.clone.arraybuffer[i]);
          }
          this.loaded(buffer);
        } else {
          request = new XMLHttpRequest();
          request.open('GET', this.url, true);
          request.responseType = 'arraybuffer';
          request.onload = function() {
            return musocrat.context.decodeAudioData(request.response, bufferSetup, decodeError);
          };
          request.send();
        }
        bufferSetup = (function(_this) {
          return function(buffer) {
            return _this.loaded(buffer);
          };
        })(this);
        decodeError = (function(_this) {
          return function(error) {
            console.error("Audio decoding error: " + error);
            return _this.error = true;
          };
        })(this);
      };

      Player.prototype.loaded = function(buffer) {
        this.audio.buffer = buffer;
        console.log("" + this.id + " loaded");
        this.audio.connect(musocrat.context.destination);
        if (!this.cached) {
          this.cloneBuffer();
        }
        if (!($.inArray(this.id, musocrat.buffers.active) >= 0)) {
          musocrat.buffers.active.push(this.id);
        }
        return this.ready = true;
      };

      Player.prototype.cloneBuffer = function() {
        var arraybuffer, buffer, i, _i, _ref;
        buffer = this.audio.buffer;
        arraybuffer = [];
        for (i = _i = 0, _ref = buffer.numberOfChannels; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          arraybuffer[i] = new Float32Array(buffer.getChannelData(i));
        }
        return musocrat.buffers.cache.push({
          id: this.id,
          data: {
            buffer: this.audio.buffer,
            arraybuffer: arraybuffer
          }
        });
      };

      Player.prototype.getCachedBuffer = function() {
        var i, _i, _ref;
        for (i = _i = 0, _ref = musocrat.buffers.cache.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (musocrat.buffers.cache[i].id === this.id) {
            return musocrat.buffers.cache[i].data;
          }
        }
      };

      Player.prototype.baseTTS = function() {
        var all_tts;
        all_tts = [];
        $.each(musocrat.buffers.players, function(key, buffer) {
          return all_tts.push({
            id: buffer.id,
            tts: buffer.tts
          });
        });
        return musocrat.baseTTS = all_tts.sort(function(b1, b2) {
          return b1.tts - b2.tts;
        })[0];
      };

      Player.prototype.time = function() {
        switch (false) {
          case !(this.offset < 0):
            this.start_time = Math.abs(this.offset);
            return this.offset = 0;
          case !(this.offset > 0):
            return this.start_time = 0;
          default:
            return this.start_time = this.tts - musocrat.baseTTS.tts;
        }
      };

      Player.prototype.play = function() {
        if (this.ready) {
          this.time();
          console.log("current: " + musocrat.context.currentTime + ", start: " + this.start_time + ", offset: " + this.offset);
          this.audio.start(musocrat.context.currentTime + this.start_time, this.offset);
          this.started = musocrat.context.currentTime + this.start_time;
          musocrat.buffers.playing.push(this.id);
          return this.playing = true;
        }
      };

      Player.prototype.stop = function() {
        if (this.playing) {
          this.audio.stop(0);
        }
        return this.clean();
      };

      Player.prototype.pause = function() {
        console.log("started: " + this.started + ", current: " + musocrat.context.currentTime + ", position: " + (this.position()));
        this.audio.stop(0);
        rmFromArray(musocrat.buffers.playing, this.id);
        return musocrat.buffers.players["player" + this.id] = new Player(this.id, this.url, this.tts, this.position());
      };

      Player.prototype.reset = function() {
        this.audio.stop(0);
        rmFromArray(musocrat.buffers.playing, this.id);
        return musocrat.buffers.players["player" + this.id] = new Player(this.id, this.url, this.tts, 0);
      };

      Player.prototype.clean = function() {
        var i, length, _i;
        rmFromArray(musocrat.buffers.active, this.id);
        rmFromArray(musocrat.buffers.playing, this.id);
        length = musocrat.buffers.cache.length;
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          if (musocrat.buffers.cache[i].id === this.id) {
            musocrat.buffers.cache.splice(i, 1);
          }
          length = musocrat.buffers.cache.length;
        }
        return delete musocrat.buffers.players["player" + this.id];
      };

      return Player;

    })();
    musocrat.composer = function(action, parts, ids) {
      if (parts == null) {
        parts = null;
      }
      if (ids == null) {
        ids = null;
      }
      ids = $.isArray(ids) ? ids : [ids];
      switch (false) {
        case action !== 'load':
          if (parts !== null) {
            return bufferBuilder(parts);
          }
          break;
        case action !== 'play':
          return buffersPlay(ids);
        case action !== 'playall':
          return buffersPlay();
        case action !== 'stop':
          return buffersStop(ids);
        case action !== 'stopall':
          return buffersStop();
        case action !== 'pause':
          return buffersPause(ids);
        case action !== 'pauseall':
          return buffersPause();
        case action !== 'reset':
          return buffersReset(ids);
        default:
          return buffersReset();
      }
    };
    bufferBuilder = function(parts) {
      return $.each(parts, function(i, data) {
        return musocrat.buffers.players["player" + data.id] = new Player(data.id, data.url, data.tts);
      });
    };
    buffersPlay = (function(_this) {
      return function(ids, tries) {
        var buffersArray;
        if (ids == null) {
          ids = null;
        }
        if (tries == null) {
          tries = 0;
        }
        buffersArray = [];
        $.each(musocrat.buffers.players, function(k) {
          return buffersArray.push(musocrat.buffers.players[k]);
        });
        if (buffersArray.every(function(buffer) {
          return buffer.ready;
        })) {
          return $.each(musocrat.buffers.players, function(key, buffer) {
            if (ids === null || $.inArray(buffer.id, ids) >= 0) {
              return buffer.play();
            }
          });
        } else if (tries < 30) {
          tries++;
          return setTimeout((function() {
            return buffersPlay(ids, tries);
          }), 500);
        } else {
          return console.error('Problem buffering audio files!');
        }
      };
    })(this);
    buffersStop = function(ids) {
      if (ids == null) {
        ids = null;
      }
      return $.each(musocrat.buffers.players, function(key, buffer) {
        if (ids === null || $.inArray(buffer.id, ids) >= 0) {
          return buffer.stop();
        }
      });
    };
    buffersPause = function(ids) {
      if (ids == null) {
        ids = null;
      }
      return $.each(musocrat.buffers.players, function(key, buffer) {
        if (ids === null || $.inArray(buffer.id, ids) >= 0) {
          return buffer.pause();
        }
      });
    };
    buffersReset = function(ids) {
      if (ids == null) {
        ids = null;
      }
      return $.each(musocrat.buffers.players, function(key, buffer) {
        if (ids === null || $.inArray(buffer.id, ids) >= 0) {
          return buffer.reset();
        }
      });
    };
    $("#load-defaults").on('click', function() {
      return test_parts();
    });
    $("#player-inner-circle").on('click', function() {
      console.log(musocrat.buffers.playing.length);
      if (musocrat.buffers.playing.length > 0) {
        return musocrat.composer('pauseall');
      } else {
        return musocrat.composer('playall');
      }
    });
    $("#pauseall").on('click', function() {
      return musocrat.composer('pauseall');
    });
    $("#stopall").on('click', function() {
      return musocrat.composer('stopall');
    });
    $("#resetall").on('click', function() {
      return musocrat.composer('resetall');
    });
    $("#unloadall").on('click', function() {
      return musocrat.composer('unloadall');
    });
    test_parts = function() {
      return musocrat.composer('load', [
        {
          id: 68,
          url: 'https://s3.amazonaws.com/musocrat.s3/uploads/part/file/68/ogg_1012-folk-2-bass-22-4.ogg',
          tts: 51.433438
        }, {
          id: 69,
          url: 'https://s3.amazonaws.com/musocrat.s3/uploads/part/file/69/ogg_1012-folk-2-drums-20-2.ogg',
          tts: 2.884229
        }, {
          id: 70,
          url: 'https://s3.amazonaws.com/musocrat.s3/uploads/part/file/70/ogg_1012-folk-2-strings-21-3.ogg',
          tts: 33.6285
        }, {
          id: 71,
          url: 'https://s3.amazonaws.com/musocrat.s3/uploads/part/file/71/ogg_1012-folk-2-vibes-23-5.ogg',
          tts: 74.084375
        }, {
          id: 72,
          url: 'https://s3.amazonaws.com/musocrat.s3/uploads/part/file/72/ogg_1012-folk-2-violin-19-1.ogg',
          tts: 1.378844
        }, {
          id: 73,
          url: 'https://s3.amazonaws.com/musocrat.s3/uploads/part/file/73/ogg_1012-folk-2-vox-24-6.ogg',
          tts: 33.949677
        }
      ]);
    };
    return test_parts();
  });

}).call(this);
